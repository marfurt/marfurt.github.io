<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-09-25T18:11:59+02:00</updated><id>/feed.xml</id><title type="html">Nicolas Prallet-Marfurt</title><subtitle>Personal website and blog of Nicolas Prallet-Marfurt</subtitle><entry xml:lang="fr"><title type="html">RESTful Web services</title><link href="/web/api/2015/02/01/restful-web-services.html" rel="alternate" type="text/html" title="RESTful Web services" /><published>2015-02-01T12:00:00+01:00</published><updated>2015-02-01T12:00:00+01:00</updated><id>/web/api/2015/02/01/restful-web-services</id><content type="html" xml:base="/web/api/2015/02/01/restful-web-services.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;A RESTful web service is a Web service implemented using HTTP and the principles of REST. Representational State Transfer (REST) is a style of software architecture for distributed systems, introduced and defined in 2000 by Roy Fielding in &lt;a href=&quot;http://www.ics.uci.edu/fielding/pubs/dissertation/restarchstyle.htm&quot;&gt;his doctoral dissertation&lt;/a&gt;. Fielding is one of the principal authors of the Hypertext Transfer Protocol (HTTP) specification versions 1.0 and 1.1. The Resource-Oriented Architecture (ROA) is a commonsense set of rules for designing RESTful Web services, introduced by Leonard Richardson et Sam Ruby in the book RESTful Web services.&lt;/p&gt;

&lt;h2 id=&quot;competing-web-service-architectures&quot;&gt;Competing Web Service Architectures&lt;/h2&gt;

&lt;p&gt;We can distinguish between three common Web service architectures: RESTful resource-oriented, RPC-style, and REST-RPC hybrid.&lt;/p&gt;

&lt;h3 id=&quot;restful-resource-oriented-architectures&quot;&gt;RESTful, Resource-Oriented Architectures&lt;/h3&gt;

&lt;p&gt;In RESTful architectures, the method information goes into the HTTP method. In Resource-Oriented Architectures, the scoping information goes into the URI. This is actually the main topic of this article.&lt;/p&gt;

&lt;h3 id=&quot;rpc-style-architectures&quot;&gt;RPC-Style Architectures&lt;/h3&gt;

&lt;p&gt;An RPC-style Web service accepts an envelope full of data from its client, and sends a similar envelope back. The method and the scoping information are kept inside the envelope. SOAP is a popular envelope format, generally put inside an HTTP envelope. Every RPC-style service defines a brand new vocabulary. By contrast, all RESTful Web services share a standard vocabulary of HTTP methods. Every object in a RESTful service responds to the same basic interface.&lt;/p&gt;

&lt;p&gt;The Web is simple, based on the existing HTTP protocol. REST utilizes its methods and other existing features; SOAP RPC over HTTP, on the other hand, encourages each application designer to define new and arbitrary methods that supplant HTTP method.&lt;/p&gt;

&lt;h3 id=&quot;rest-rpc-hybrid-architectures&quot;&gt;REST-RPC Hybrid Architectures&lt;/h3&gt;

&lt;p&gt;REST-RPC hybrid architecture is a term made up by Richardson &amp;amp; Ruby for describing Web services that fit somewhere in between the RESTful Web services and the purely RPC-style services. These services are clearly designed as RPC-style services (ones that use HTTP as their envelope format), despite the “REST” in the URI. The scoping information is in the URI, just like a RESTful resource-oriented service; but the method information also goes in the URI. In a RESTful service, the method information would go into the HTTP method, and whatever was leftover would become scoping information. Such a service is simply using HTTP as an envelope format, sticking the method and scoping information wherever it pleases.&lt;/p&gt;

&lt;h2 id=&quot;rest-and-resource-oriented-architecture-roa&quot;&gt;REST and Resource-Oriented Architecture (ROA)&lt;/h2&gt;

&lt;h3 id=&quot;properties&quot;&gt;Properties&lt;/h3&gt;

&lt;p&gt;REST relies on the well-known, well-defined HTTP protocol, and heavily uses its properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;URIs (uniform resource identifier)&lt;/li&gt;
  &lt;li&gt;Internet media types (MIME types or Content types)&lt;/li&gt;
  &lt;li&gt;methods (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPTIONS&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;response codes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The resource-oriented architecture has the following properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;uniform interface: the method information is kept in the HTTP method&lt;/li&gt;
  &lt;li&gt;addressability: expose at least one URI for every resource&lt;/li&gt;
  &lt;li&gt;statelessness: every request happens in complete isolation (i.e. the server never relies on information from previous requests; application state resides in requests)&lt;/li&gt;
  &lt;li&gt;connectedness: resources should link to each other in their representation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resources-and-uris&quot;&gt;Resources and URIs&lt;/h3&gt;

&lt;p&gt;While &lt;strong&gt;RPC architecture&lt;/strong&gt; (including SOAP) exposes &lt;strong&gt;internal algorithms&lt;/strong&gt;, or verbs, &lt;strong&gt;ROA&lt;/strong&gt; exposes &lt;strong&gt;internal data&lt;/strong&gt;, or nouns (objects). In that sense, ROA may be considered as an “extreme object-oriented” architecture.&lt;/p&gt;

&lt;p&gt;Requests and responses are built around the transfer of representations of &lt;em&gt;resources&lt;/em&gt;. &lt;strong&gt;A resource can be essentially any coherent and meaningful concept that may be addressed&lt;/strong&gt;, or in other words anything important enough to be referenced as a “thing”.&lt;/p&gt;

&lt;p&gt;A resource must have at least one URI; the URI is the name and address of a resource.&lt;/p&gt;

&lt;p&gt;A RESTful Web service exposes both its data and its algorithms through resources. URIs should be descriptive; there’s usually a hierarchy that starts out small and branches out into infinitely many leaf nodes. For algorithmic resource, query variables can be used.
Ex: /parent/child1;child?start=10&lt;/p&gt;

&lt;h3 id=&quot;http-methods&quot;&gt;HTTP methods&lt;/h3&gt;

&lt;p&gt;The HTTP method corresponds to the HTTP &lt;em&gt;verb&lt;/em&gt;, or &lt;em&gt;action&lt;/em&gt;, and indicates how the client expects the sever to process this envelope. The following methods are used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;: retrieve information&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;: create a new entry (from parent)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUT&lt;/code&gt;: update an existing entry or create a new one (with all information)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;: delete an existing resource&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;: retrieve a metadata-only representation&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPTIONS&lt;/code&gt;: check which HTTP methods a particular resource supports&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; method can be overloaded for some specific reasons, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;simulating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUT&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DELETE&lt;/code&gt; for clients that do not support them&lt;/li&gt;
  &lt;li&gt;a workaround for max length URI (ex: Apache = 8KB)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-header&quot;&gt;HTTP header&lt;/h3&gt;

&lt;p&gt;The HTTP header is very helpful metadata when building resource-oriented Web services. It can give information about request authentication, encoding, (re)location, etc… without even inspecting the request body.&lt;/p&gt;

&lt;h3 id=&quot;http-response-codes&quot;&gt;HTTP response codes&lt;/h3&gt;

&lt;p&gt;HTTP response codes are very important; they tell the client how to deal with the object(s) in the entity body, or what to do if they can’t understand the it.&lt;/p&gt;

&lt;h3 id=&quot;media-types-format&quot;&gt;Media types (format)&lt;/h3&gt;

&lt;p&gt;REST is not tied up to any specific format. Usually though, common representations like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATOM&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JPEG&lt;/code&gt;, etc… are used, compressed or not.&lt;/p&gt;

&lt;h2 id=&quot;documenting-a-restful-web-service&quot;&gt;Documenting a RESTful Web service&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A REST API should spend almost all of its descriptive effort in defining the media type(s) used for representing resources and driving application state, or in defining extended relation names and/or hypertext-enabled mark-up for existing standard media types. Any effort spent describing what methods to use on what URIs of interest should be entirely defined within the scope of the processing rules for a media type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lack of a standard description language is often cited as a limitation of REST. In reality, machine-readable description languages do not communicate the semantics necessary for client developers to write code. Thus, most REST services are documented by no more than a textual description (a human-readable HTML file).&lt;/p&gt;

&lt;p&gt;With version 2.0, WSDL supports all HTTP verbs and it is now considered to be an acceptable method of documenting REST services. An alternative is &lt;a href=&quot;http://www.w3.org/Submission/wadl/&quot;&gt;WADL&lt;/a&gt;, the Web Application Description Language, which is lightweight, easier to understand and easier to write than WSDL. However, WSDL and even WADL are usually considered to be an overkill.&lt;/p&gt;

&lt;p&gt;A RESTful Web service documentation should fully describe the following in human readable description:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All resources, and methods supported for each resource.&lt;/li&gt;
  &lt;li&gt;Media types and representation formats for resources in requests and responses.&lt;/li&gt;
  &lt;li&gt;Each link relation used, its business significance, HTTP method to be used, and resource that the link identifies.&lt;/li&gt;
  &lt;li&gt;All fixed URIs that are not supplied via links.&lt;/li&gt;
  &lt;li&gt;Query parameters used for all fixed URIs.&lt;/li&gt;
  &lt;li&gt;URI templates, and token substitution rules.&lt;/li&gt;
  &lt;li&gt;Authentication and security credentials for accessing resources.&lt;/li&gt;
  &lt;li&gt;For XML representations, if your clients and servers are capable of supporting XML schemas, use a schema language as a “convention” to describe the structure of XML documents used for representations in requests and responses. For other formats, use conventions to describe representations in prose (such as JSON schemas).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example of RESTful Web service documentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://kenai.com/projects/suncloudapis/pages/CloudAPISpecificationResourceModels&lt;/li&gt;
  &lt;li&gt;http://wiki.openstreetmap.org/wiki/API_v0.6&lt;/li&gt;
  &lt;li&gt;http://weblog.bocoup.com/documenting-your-api/&lt;/li&gt;
  &lt;li&gt;http://predic8.com/rest-webservices.htm&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="web" /><category term="api" /><summary type="html">Introduction</summary></entry></feed>